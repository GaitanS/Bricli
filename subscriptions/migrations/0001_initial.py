# Generated by Django 5.2.6 on 2025-10-18 21:37

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0011_craftsmanprofile_cnp_craftsmanprofile_company_name_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="StripeWebhookEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_id",
                    models.CharField(
                        db_index=True,
                        help_text="Stripe Event ID (evt_xxx) - UNIQUE constraint ensures idempotency",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(help_text="Event type (e.g., invoice.payment_succeeded)", max_length=100),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("success", "Success"), ("failed", "Failed")], default="success", max_length=20
                    ),
                ),
                ("event_data", models.JSONField(help_text="Full event payload from Stripe")),
                ("processed_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "stripe_webhook_events",
                "ordering": ["-processed_at"],
                "indexes": [
                    models.Index(fields=["event_type", "processed_at"], name="webhook_type_date_idx"),
                    models.Index(fields=["status"], name="webhook_status_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SubscriptionTier",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        choices=[("free", "Free"), ("plus", "Plus"), ("pro", "Pro")],
                        help_text="Internal tier identifier",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Display name for users (e.g., 'Plan Gratuit', 'Plan Plus')", max_length=50
                    ),
                ),
                ("price", models.IntegerField(help_text="Price in cents (e.g., 4900 for 49 RON)")),
                (
                    "monthly_lead_limit",
                    models.IntegerField(blank=True, help_text="Maximum leads per month (NULL = unlimited)", null=True),
                ),
                ("max_portfolio_images", models.IntegerField(default=3, help_text="Maximum portfolio images allowed")),
                (
                    "profile_badge",
                    models.CharField(
                        blank=True,
                        help_text="Badge text to display on profile (e.g., 'Verificat', 'Top Pro')",
                        max_length=50,
                    ),
                ),
                (
                    "priority_in_search",
                    models.IntegerField(default=0, help_text="Search result priority (0=normal, 1=medium, 2=high)"),
                ),
                (
                    "show_in_featured",
                    models.BooleanField(default=False, help_text="Show in featured craftsmen section on homepage"),
                ),
                ("can_attach_pdf", models.BooleanField(default=False, help_text="Allow PDF attachments in quotes")),
                (
                    "analytics_access",
                    models.BooleanField(default=False, help_text="Access to advanced analytics dashboard"),
                ),
                (
                    "stripe_price_id",
                    models.CharField(blank=True, help_text="Stripe Price ID (e.g., price_xxxPLUS)", max_length=100),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "subscription_tiers",
                "ordering": ["price"],
                "indexes": [models.Index(fields=["priority_in_search"], name="tier_priority_idx")],
            },
        ),
        migrations.CreateModel(
            name="CraftsmanSubscription",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Activă"),
                            ("past_due", "Întârziată"),
                            ("canceled", "Anulată"),
                            ("refunded", "Rambursată"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_subscription_id",
                    models.CharField(blank=True, help_text="Stripe Subscription ID (sub_xxx)", max_length=100),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(blank=True, help_text="Stripe Customer ID (cus_xxx)", max_length=100),
                ),
                ("current_period_start", models.DateTimeField(help_text="Start of current billing period")),
                ("current_period_end", models.DateTimeField(help_text="End of current billing period")),
                (
                    "leads_used_this_month",
                    models.IntegerField(default=0, help_text="Number of leads received this billing period"),
                ),
                (
                    "grace_period_end",
                    models.DateTimeField(
                        blank=True, help_text="End of 7-day grace period for failed payments", null=True
                    ),
                ),
                (
                    "withdrawal_right_waived",
                    models.BooleanField(default=False, help_text="User explicitly waived 14-day withdrawal right"),
                ),
                (
                    "withdrawal_deadline",
                    models.DateTimeField(
                        blank=True, help_text="Deadline for 14-day withdrawal right (NULL if waived)", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "craftsman",
                    models.OneToOneField(
                        help_text="Craftsman who owns this subscription",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription",
                        to="accounts.craftsmanprofile",
                    ),
                ),
                (
                    "tier",
                    models.ForeignKey(
                        help_text="Current subscription tier",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="subscriptions",
                        to="subscriptions.subscriptiontier",
                    ),
                ),
            ],
            options={
                "db_table": "craftsman_subscriptions",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("migration_to_free", "Migration to Free"),
                            ("upgrade", "Upgrade"),
                            ("downgrade", "Downgrade"),
                            ("cancel", "Cancel"),
                            ("payment_failed", "Payment Failed"),
                            ("payment_succeeded", "Payment Succeeded"),
                            ("refund_requested", "Refund Requested"),
                            ("invoice_created", "Invoice Created"),
                            ("invoice_pending", "Invoice Pending"),
                        ],
                        help_text="Type of subscription event",
                        max_length=50,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional event data (invoice numbers, error messages, etc.)",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "subscription",
                    models.ForeignKey(
                        help_text="Subscription this log entry belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="subscriptions.craftsmansubscription",
                    ),
                ),
                (
                    "new_tier",
                    models.ForeignKey(
                        blank=True,
                        help_text="New tier",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="logs_new",
                        to="subscriptions.subscriptiontier",
                    ),
                ),
                (
                    "old_tier",
                    models.ForeignKey(
                        blank=True,
                        help_text="Previous tier (NULL for new subscriptions)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="logs_old",
                        to="subscriptions.subscriptiontier",
                    ),
                ),
            ],
            options={
                "db_table": "subscription_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["subscription", "timestamp"], name="log_sub_time_idx"),
                    models.Index(fields=["event_type", "timestamp"], name="log_event_time_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="craftsmansubscription",
            index=models.Index(fields=["status", "current_period_end"], name="sub_status_end_idx"),
        ),
        migrations.AddIndex(
            model_name="craftsmansubscription",
            index=models.Index(fields=["grace_period_end"], name="sub_grace_idx"),
        ),
        migrations.AddIndex(
            model_name="craftsmansubscription",
            index=models.Index(fields=["withdrawal_deadline"], name="sub_withdrawal_idx"),
        ),
        migrations.AddIndex(
            model_name="craftsmansubscription",
            index=models.Index(fields=["craftsman", "status"], name="sub_craftsman_status_idx"),
        ),
        migrations.AddIndex(
            model_name="craftsmansubscription",
            index=models.Index(fields=["tier", "status"], name="sub_tier_status_idx"),
        ),
    ]
