class NotificationManager{constructor(){this.baseUrl='/notifications/';this.apiUrl='/notifications/api/';this.csrfToken=this.getCSRFToken();this.unreadCount=0;this.isInitialized=false;this.init();}
init(){if(this.isInitialized)return;this.updateUnreadCount();this.initializeServiceWorker();this.setupEventListeners();this.isInitialized=true;}
getCSRFToken(){const token=document.querySelector('[name=csrfmiddlewaretoken]');return token?token.value:'';}
async updateUnreadCount(){try{const response=await fetch(`${this.apiUrl}stats/`,{headers:{'X-CSRFToken':this.csrfToken}});if(response.ok){const data=await response.json();this.unreadCount=data.unread;this.updateUnreadBadge(data.unread);}}catch(error){console.error('Error updating unread count:',error);}}
updateUnreadBadge(count){const badges=document.querySelectorAll('.notification-counter, .unread-count');badges.forEach(badge=>{if(count>0){badge.textContent=count>99?'99+':count;badge.style.display='flex';}else{badge.style.display='none';}});}
async toggleReadStatus(notificationId,isRead){try{const response=await fetch(`${this.baseUrl}ajax/toggle-read/${notificationId}/`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken},body:JSON.stringify({is_read:isRead})});if(response.ok){const data=await response.json();const notificationItem=document.querySelector(`[data-notification-id="${notificationId}"]`);if(notificationItem){if(isRead){notificationItem.classList.remove('unread');}else{notificationItem.classList.add('unread');}}
this.updateUnreadCount();return data;}else{throw new Error('Failed to toggle read status');}}catch(error){console.error('Error toggling read status:',error);this.showToast('Eroare la actualizarea statusului notificării.','error');throw error;}}
async deleteNotification(notificationId){try{const response=await fetch(`${this.baseUrl}ajax/delete/${notificationId}/`,{method:'POST',headers:{'X-CSRFToken':this.csrfToken}});if(response.ok){const notificationItem=document.querySelector(`[data-notification-id="${notificationId}"]`);if(notificationItem){notificationItem.style.transition='all 0.3s ease';notificationItem.style.opacity='0';notificationItem.style.transform='translateX(-100%)';setTimeout(()=>{notificationItem.remove();},300);}
this.updateUnreadCount();return true;}else{throw new Error('Failed to delete notification');}}catch(error){console.error('Error deleting notification:',error);this.showToast('Eroare la ștergerea notificării.','error');throw error;}}
async markAllAsRead(){try{const response=await fetch(`${this.apiUrl}bulk-read/`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken},body:JSON.stringify({action:'mark_read'})});if(response.ok){const unreadItems=document.querySelectorAll('.notification-item.unread');unreadItems.forEach(item=>{item.classList.remove('unread');});this.updateUnreadCount();this.showToast('Toate notificările au fost marcate ca citite.','success');return true;}else{throw new Error('Failed to mark all as read');}}catch(error){console.error('Error marking all as read:',error);this.showToast('Eroare la marcarea notificărilor ca citite.','error');throw error;}}
async bulkDelete(notificationIds){try{const response=await fetch(`${this.apiUrl}bulk-delete/`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken},body:JSON.stringify({notification_ids:notificationIds})});if(response.ok){notificationIds.forEach(id=>{const item=document.querySelector(`[data-notification-id="${id}"]`);if(item){item.style.transition='all 0.3s ease';item.style.opacity='0';item.style.transform='translateX(-100%)';setTimeout(()=>{item.remove();},300);}});this.updateUnreadCount();this.showToast(`${notificationIds.length}notificări au fost șterse.`,'success');return true;}else{throw new Error('Failed to bulk delete');}}catch(error){console.error('Error bulk deleting:',error);this.showToast('Eroare la ștergerea notificărilor.','error');throw error;}}
async initializeServiceWorker(){if('serviceWorker'in navigator){try{const registration=await navigator.serviceWorker.register('/static/js/sw.js');console.log('Service Worker registered:',registration);navigator.serviceWorker.addEventListener('message',event=>{if(event.data&&event.data.type==='NOTIFICATION_CLICKED'){this.handleNotificationClick(event.data.notificationId);}});}catch(error){console.error('Service Worker registration failed:',error);}}}
handleNotificationClick(notificationId){this.toggleReadStatus(notificationId,true).then(()=>{window.location.href=`${this.baseUrl}${notificationId}/`;});}
setupEventListeners(){this.setupRealTimeUpdates();document.addEventListener('visibilitychange',()=>{if(!document.hidden){this.updateUnreadCount();}});}
setupRealTimeUpdates(){if(typeof WebSocket!=='undefined'){this.setupWebSocket();}else{this.setupPolling();}}
setupWebSocket(){const protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${protocol}
try{this.ws=new WebSocket(wsUrl);this.ws.onopen=()=>{console.log('WebSocket connected for notifications');};this.ws.onmessage=(event)=>{const data=JSON.parse(event.data);this.handleRealTimeNotification(data);};this.ws.onclose=()=>{console.log('WebSocket disconnected, attempting to reconnect...');setTimeout(()=>{this.setupWebSocket();},5000);};this.ws.onerror=(error)=>{console.error('WebSocket error:',error);this.setupPolling();};}catch(error){console.error('WebSocket setup failed:',error);this.setupPolling();}}
setupPolling(){setInterval(()=>{this.updateUnreadCount();},30000);}
handleRealTimeNotification(data){if(data.type==='new_notification'){this.showNewNotification(data.notification);this.updateUnreadCount();}else if(data.type==='notification_read'){this.updateNotificationStatus(data.notification_id,true);}else if(data.type==='notification_deleted'){this.removeNotificationFromUI(data.notification_id);}}
showNewNotification(notification){if(Notification.permission==='granted'){new Notification(notification.title,{body:notification.message,icon:'/static/images/logo-small.png',tag:`notification-${notification.id}`,data:{notificationId:notification.id}});}
this.showToast(`Notificare nouă:${notification.title}`,'info');if(window.location.pathname.includes('/notifications/')){this.addNotificationToList(notification);}}
addNotificationToList(notification){const notificationList=document.querySelector('.list-group');if(!notificationList)return;const notificationHtml=this.createNotificationHTML(notification);const tempDiv=document.createElement('div');tempDiv.innerHTML=notificationHtml;const notificationElement=tempDiv.firstElementChild;notificationElement.classList.add('notification-new');notificationList.insertBefore(notificationElement,notificationList.firstChild);setTimeout(()=>{notificationElement.classList.remove('notification-new');},500);}
createNotificationHTML(notification){const timeAgo=this.timeAgo(new Date(notification.created_at));const priorityClass=notification.priority||'secondary';return`<div class="list-group-item notification-item unread"data-notification-id="${notification.id}"><div class="d-flex align-items-start"><div class="form-check me-3"><input class="form-check-input notification-checkbox"type="checkbox"value="${notification.id}"></div><div class="flex-grow-1"><div class="d-flex justify-content-between align-items-start mb-2"><h6 class="mb-1 notification-title"><i class="fas fa-circle text-primary me-1"style="font-size: 0.5rem;"></i>${notification.title}</h6><div class="d-flex align-items-center"><span class="badge bg-${priorityClass} me-2">${notification.priority_display||'Normal'}</span><small class="text-muted">${timeAgo}</small></div></div><p class="mb-2 text-muted notification-message">${this.truncateText(notification.message,20)}</p><div class="d-flex justify-content-between align-items-center"><div><span class="badge bg-light text-dark">${notification.type_display||notification.notification_type}</span></div><div class="btn-group"role="group"><a href="/notifications/${notification.id}/"class="btn btn-outline-primary btn-sm"><i class="fas fa-eye"></i></a><button type="button"class="btn btn-outline-secondary btn-sm toggle-read-btn"
data-notification-id="${notification.id}"data-is-read="false"><i class="fas fa-envelope-open"></i></button><button type="button"class="btn btn-outline-danger btn-sm delete-btn"
data-notification-id="${notification.id}"><i class="fas fa-trash"></i></button></div></div></div></div></div>`;}
updateNotificationStatus(notificationId,isRead){const notificationItem=document.querySelector(`[data-notification-id="${notificationId}"]`);if(notificationItem){if(isRead){notificationItem.classList.remove('unread');}else{notificationItem.classList.add('unread');}}}
removeNotificationFromUI(notificationId){const notificationItem=document.querySelector(`[data-notification-id="${notificationId}"]`);if(notificationItem){notificationItem.style.transition='all 0.3s ease';notificationItem.style.opacity='0';notificationItem.style.transform='translateX(-100%)';setTimeout(()=>{notificationItem.remove();},300);}}
showToast(message,type='info',duration=5000){let toastContainer=document.querySelector('.toast-container');if(!toastContainer){toastContainer=document.createElement('div');toastContainer.className='toast-container position-fixed bottom-0 end-0 p-3';document.body.appendChild(toastContainer);}
const toastId='toast-'+Date.now();const toastHtml=`<div id="${toastId}"class="toast bg-${type === 'error' ? 'danger' : type} text-white"role="alert"><div class="toast-header bg-transparent text-white border-0"><i class="fas fa-bell me-2"></i><strong class="me-auto">Notificare</strong><button type="button"class="btn-close btn-close-white"data-bs-dismiss="toast"></button></div><div class="toast-body">${message}</div></div>`;toastContainer.insertAdjacentHTML('beforeend',toastHtml);const toastElement=document.getElementById(toastId);const toast=new bootstrap.Toast(toastElement,{delay:duration});toast.show();toastElement.addEventListener('hidden.bs.toast',()=>{toastElement.remove();});}
timeAgo(date){const now=new Date();const diffInSeconds=Math.floor((now-date)/1000);if(diffInSeconds<60){return'acum câteva secunde';}else if(diffInSeconds<3600){const minutes=Math.floor(diffInSeconds/60);return`${minutes}${minutes===1?'minut':'minute'}în urmă`;}else if(diffInSeconds<86400){const hours=Math.floor(diffInSeconds/3600);return`${hours}${hours===1?'oră':'ore'}în urmă`;}else{const days=Math.floor(diffInSeconds/86400);return`${days}${days===1?'zi':'zile'}în urmă`;}}
truncateText(text,wordLimit){const words=text.split(' ');if(words.length<=wordLimit){return text;}
return words.slice(0,wordLimit).join(' ')+'...';}}
class PushNotificationManager{constructor(){this.vapidPublicKey=null;this.subscription=null;}
async initialize(){if(!('serviceWorker'in navigator)||!('PushManager'in window)){console.warn('Push notifications not supported');return false;}
try{const registration=await navigator.serviceWorker.ready;this.subscription=await registration.pushManager.getSubscription();return true;}catch(error){console.error('Error initializing push notifications:',error);return false;}}
async requestPermission(){if(Notification.permission==='granted'){return true;}
const permission=await Notification.requestPermission();return permission==='granted';}
async subscribe(){if(!await this.requestPermission()){throw new Error('Permission denied');}
const registration=await navigator.serviceWorker.ready;const response=await fetch('/notifications/api/push/vapid-key/');const data=await response.json();this.vapidPublicKey=data.public_key;this.subscription=await registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:this.urlBase64ToUint8Array(this.vapidPublicKey)});await this.sendSubscriptionToServer();return this.subscription;}
async unsubscribe(){if(this.subscription){await this.subscription.unsubscribe();this.subscription=null;await fetch('/notifications/api/push/unsubscribe/',{method:'POST',headers:{'X-CSRFToken':document.querySelector('[name=csrfmiddlewaretoken]').value}});}}
async sendSubscriptionToServer(){await fetch('/notifications/api/push/subscribe/',{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':document.querySelector('[name=csrfmiddlewaretoken]').value},body:JSON.stringify({subscription:this.subscription.toJSON()})});}
urlBase64ToUint8Array(base64String){const padding='='.repeat((4-base64String.length%4)%4);const base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');const rawData=window.atob(base64);const outputArray=new Uint8Array(rawData.length);for(let i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}
return outputArray;}}
document.addEventListener('DOMContentLoaded',function(){window.notificationManager=new NotificationManager();window.pushNotificationManager=new PushNotificationManager();window.pushNotificationManager.initialize();});if(typeof module!=='undefined'&&module.exports){module.exports={NotificationManager,PushNotificationManager};}