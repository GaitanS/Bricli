const CACHE_NAME='bricli-notifications-v1';const urlsToCache=['/static/css/notifications.css','/static/js/notifications.js','/static/images/logo-small.png'];self.addEventListener('install',event=>{console.log('Service Worker installing...');event.waitUntil(caches.open(CACHE_NAME).then(cache=>{console.log('Opened cache');return cache.addAll(urlsToCache);}).then(()=>{return self.skipWaiting();}));});self.addEventListener('activate',event=>{console.log('Service Worker activating...');event.waitUntil(caches.keys().then(cacheNames=>{return Promise.all(cacheNames.map(cacheName=>{if(cacheName!==CACHE_NAME){console.log('Deleting old cache:',cacheName);return caches.delete(cacheName);}}));}).then(()=>{return self.clients.claim();}));});self.addEventListener('fetch',event=>{event.respondWith(caches.match(event.request).then(response=>{return response||fetch(event.request);}));});self.addEventListener('push',event=>{console.log('Push event received:',event);let notificationData={title:'Notificare nouă',body:'Aveți o notificare nouă pe Bricli',icon:'/static/images/logo-small.png',badge:'/static/images/badge.png',tag:'bricli-notification',requireInteraction:false,actions:[{action:'view',title:'Vezi',icon:'/static/images/view-icon.png'},{action:'dismiss',title:'Închide',icon:'/static/images/dismiss-icon.png'}],data:{url:'/notifications/',notificationId:null}};if(event.data){try{const payload=event.data.json();notificationData={...notificationData,title:payload.title||notificationData.title,body:payload.message||payload.body||notificationData.body,icon:payload.icon||notificationData.icon,tag:payload.tag||`notification-${payload.id||Date.now()}`,requireInteraction:payload.priority==='high'||payload.priority==='critical',data:{url:payload.action_url||payload.url||'/notifications/',notificationId:payload.id,type:payload.notification_type,priority:payload.priority}};switch(payload.notification_type){case'order':notificationData.icon='/static/images/order-icon.png';notificationData.badge='/static/images/order-badge.png';break;case'quote':notificationData.icon='/static/images/quote-icon.png';notificationData.badge='/static/images/quote-badge.png';break;case'payment':notificationData.icon='/static/images/payment-icon.png';notificationData.badge='/static/images/payment-badge.png';break;case'message':notificationData.icon='/static/images/message-icon.png';notificationData.badge='/static/images/message-badge.png';break;case'review':notificationData.icon='/static/images/review-icon.png';notificationData.badge='/static/images/review-badge.png';break;default:break;}
if(payload.notification_type==='message'){notificationData.actions=[{action:'reply',title:'Răspunde',icon:'/static/images/reply-icon.png'},{action:'view',title:'Vezi',icon:'/static/images/view-icon.png'}];}else if(payload.notification_type==='order'){notificationData.actions=[{action:'view',title:'Vezi comanda',icon:'/static/images/view-icon.png'},{action:'dismiss',title:'Închide',icon:'/static/images/dismiss-icon.png'}];}}catch(error){console.error('Error parsing push payload:',error);}}
event.waitUntil(self.registration.showNotification(notificationData.title,notificationData));});self.addEventListener('notificationclick',event=>{console.log('Notification clicked:',event);const notification=event.notification;const action=event.action;const data=notification.data||{};notification.close();event.waitUntil(handleNotificationClick(action,data,notification));});async function handleNotificationClick(action,data,notification){const clients=await self.clients.matchAll({type:'window',includeUncontrolled:true});let targetUrl=data.url||'/notifications/';switch(action){case'view':if(data.notificationId){targetUrl=`/notifications/${data.notificationId}/`;}
break;case'reply':if(data.type==='message'){targetUrl=data.url||'/messages/';}
break;case'dismiss':return;default:if(data.notificationId){targetUrl=`/notifications/${data.notificationId}/`;}
break;}
for(const client of clients){if(client.url.includes(targetUrl.split('?')[0])&&'focus'in client){await client.focus();client.postMessage({type:'NOTIFICATION_CLICKED',notificationId:data.notificationId,action:action,url:targetUrl});return;}}
if(self.clients.openWindow){const newClient=await self.clients.openWindow(targetUrl);if(newClient){newClient.postMessage({type:'NOTIFICATION_CLICKED',notificationId:data.notificationId,action:action,url:targetUrl});}}
if(data.notificationId){try{await fetch(`/notifications/ajax/toggle-read/${data.notificationId}/`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({is_read:true})});}catch(error){console.error('Error marking notification as read:',error);}}}
self.addEventListener('sync',event=>{console.log('Background sync event:',event.tag);if(event.tag==='notification-sync'){event.waitUntil(syncNotifications());}});async function syncNotifications(){try{const response=await fetch('/notifications/api/sync/',{method:'POST'});if(response.ok){const data=await response.json();console.log('Notifications synced:',data);if(data.new_notifications&&data.new_notifications.length>0){for(const notification of data.new_notifications){await self.registration.showNotification(notification.title,{body:notification.message,icon:'/static/images/logo-small.png',tag:`notification-${notification.id}`,data:{notificationId:notification.id,url:`/notifications/${notification.id}/`}});}}}}catch(error){console.error('Error syncing notifications:',error);}}
self.addEventListener('message',event=>{console.log('Service Worker received message:',event.data);if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});self.addEventListener('periodicsync',event=>{console.log('Periodic sync event:',event.tag);if(event.tag==='notification-check'){event.waitUntil(checkForNewNotifications());}});async function checkForNewNotifications(){try{const response=await fetch('/notifications/api/unread-count/');const data=await response.json();await self.registration.sync.register('notification-sync');}catch(error){console.error('Error checking for new notifications:',error);}}
self.addEventListener('pushsubscriptionchange',event=>{console.log('Push subscription changed');event.waitUntil(self.registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:event.oldSubscription.options.applicationServerKey}).then(subscription=>{return fetch('/notifications/api/push/update-subscription/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({old_subscription:event.oldSubscription.toJSON(),new_subscription:subscription.toJSON()})});}));});function getNotificationIcon(type){const icons={order:'/static/images/order-icon.png',quote:'/static/images/quote-icon.png',payment:'/static/images/payment-icon.png',message:'/static/images/message-icon.png',review:'/static/images/review-icon.png',system:'/static/images/system-icon.png'};return icons[type]||'/static/images/logo-small.png';}
function getNotificationBadge(type){const badges={order:'/static/images/order-badge.png',quote:'/static/images/quote-badge.png',payment:'/static/images/payment-badge.png',message:'/static/images/message-badge.png',review:'/static/images/review-badge.png',system:'/static/images/system-badge.png'};return badges[type]||'/static/images/badge.png';}